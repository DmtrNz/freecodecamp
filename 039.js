function checkScope() {
   let i = 'function scope';
   if (true) {
     let i = 'block scope';
     console.log('Block scope i is: ', i);
   }
   console.log('Function scope i is: ', i);
   return i;
 }
/*Этот код определяет функцию checkScope, которая демонстрирует разницу между 
"функциональной областью видимости" (function scope) и "блочной областью видимости" (block scope) в JavaScript,
используя ключевое слово let.
   Вот пошаговое объяснение:
   Объявление переменной i с использованием let в области функции: В начале
функции checkScope объявляется переменная i, которой присваивается строка 
'function scope'. Эта переменная видима во всей функции.
   Вход в блок if: Внутри блока if (где условие всегда истинно, потому что это 
просто if (true)) объявляется новая переменная i с использованием let. Эта 
переменная i получает значение 'block scope'. Переменная, объявленная внутри 
блока, доступна только внутри этого блока.
   Вывод значения переменной i внутри блока: Когда выполняется
console.log('Block scope i is: ', i);, выводится значение внутренней 
переменной i, то есть 'block scope'.
   Вывод значения переменной i вне блока: После завершения блока if выполняется 
следующая строка console.log('Function scope i is: ', i);, и в этом случае
 выводится значение переменной i, которая находится в области функции, 
 то есть 'function scope'.
   Возврат значения: Функция завершает свою работу, возвращая значение переменной i, которое было объявлено в области функции, то есть 'function scope'.
   Функция вернет строку 'function scope'.
   */