setTimeout(() => {
    console.log('timeout') // 6) макрозадача, timeout
}, 0);

const p = new Promise((resolve, reject) => {
    console.log('Promise creation'); // 1) синхронно, Promise creation
    resolve()
})

const p2 = new Promise((resolve, reject) => {
    console.log(123) // 2) синхронно, 123
})

p.then(() => {
    console.log('Promise resolving'); // 5) пришёл из микрозадачи после всего синхронного кода, Promise resolving
})

console.log('End') // 3) синхронно, End

console.log('p2 =>>', p2) // 4) синхронно, Promise {  }

//

/* В первую очередь выполняется синхронный код: console.log или promise. По дефолту они не асинхронные, пока вы не сделаете их таковыми (например, добавите .catch или .then).С троки с консолями внутри promise выполнятся в первую очередь, поскольку в них нет ничего асинхронного, так как promise сам по себе изначально синхронный. Затем выполняются синхронная консоль ‘End’ и консоль, в которой показывается второй promise, находящийся в стадии ожидания ().

Далее выполняется .then. В базовом варианте promise выполняется синхронно. Только после того, как весь синхронный код отработал, выполняется его асинхронный обработчик. В последнюю очередь выполнится макрозадача с setTimeout.
*/