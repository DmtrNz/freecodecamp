Импорт необходимых функций:
 
 
import {combineReducers, createStore} from 'redux'
Здесь мы импортируем две функции: combineReducers и createStore из библиотеки Redux. combineReducers используется для объединения нескольких редьюсеров в один, а createStore — для создания хранилища (store).

Инициализация состояния:
 

let initialState = {items: [{name: 'Dimych'}, {name: 'Ignat'}]}
Мы определяем начальное состояние для нашего редьюсера. В данном случае состояние содержит массив items с двумя объектами, каждый из которых представляет пользователя с именем.

Определение редьюсера:

 
const usersReducer = (state = initialState, action: any) => {
    return state
}
Здесь мы создаем редьюсер usersReducer, который принимает текущее состояние и действие (action). Поскольку редьюсер не обрабатывает никакие действия, он просто возвращает текущее состояние state, что делает его «чистым» редьюсером.

Создание хранилища:

 
const store = createStore(combineReducers({
    users: usersReducer
}))
Мы создаем хранилище с помощью createStore, передавая в него объединённые редьюсеры. В данном случае у нас только один редьюсер usersReducer, который будет отвечать за состояние users.

Подписка на изменения состояния:

 
store.subscribe(() => {
    const state = store.getState()
    console.log(state)
})
Здесь мы подписываемся на изменения в состоянии хранилища. Каждый раз, когда состояние изменяется, будет вызываться функция обратного вызова, которая получает текущее состояние с помощью store.getState() и выводит его в консоль.

Отправка действия:

 
store.dispatch({type: 'ANY'})
Мы отправляем действие с типом ANY. Однако, поскольку наш редьюсер ничего не делает с этим действием (он просто возвращает текущее состояние), состояние хранилища не изменится, и в консоль будет выведено то же самое начальное состояние.

Итак, в результате выполнения этого кода в консоль будет выведено начальное состояние:

 
Копировать
{ users: { items: [{name: 'Dimych'}, {name: 'Ignat'}] } }
